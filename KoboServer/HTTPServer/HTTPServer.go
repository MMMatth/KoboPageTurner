package main

import (
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"time"
)

var gLog *os.File

var gLeftEvent = []byte{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x35, 0x00, 0x32, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x36, 0x00, 0x3E, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x3A, 0x00, 0x1E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

var gRightEvent = []byte{
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x35, 0x00, 0xFA, 0x03, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x36, 0x00, 0x3E, 0x02, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x3A, 0x00, 0x1E, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x03, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
}

func addTimeStamp(buf []byte) error {
    n := int32(time.Now().Unix())
    s := fmt.Sprintf("%08X(%d)", n, n);
    gLog.WriteString(s)

    for i := 0; i < 10; i++ {
        for d_i := 0; d_i < 4; d_i++ {
            index := i * 8

            s1 := s[8 - 2 * (d_i + 1) : 8 - 2 * d_i]
            n1, err := strconv.ParseUint(s1, 16, 8)
            if err != nil {
                gLog.WriteString(fmt.Sprintf("Strconv Error (%v) \n", err))
                return fmt.Errorf("Convert Error : %s", s)
            }

            buf[index + d_i] = byte(n1)
        }
    }

    return nil
}

func TriggerTouch(buf []byte) error {
    f, err := os.OpenFile("/dev/input/event1", os.O_WRONLY, 0777)
    if err != nil {
        gLog.WriteString(fmt.Sprintf("Open File Error (%v) \n", err))
        return err
    }

    defer f.Close()

    n, err := f.Write(buf)
    if err != nil {
        gLog.WriteString(fmt.Sprintf("Write File Error (%v) \n", err))
        return err
    }

    gLog.WriteString(fmt.Sprintf("Wrote %d bytes \n", n))
    gLog.Sync()

    fmt.Printf("Wrote %d bytes \n", n)

    return nil
}

func TouchPage(buf []byte) error {
    err := addTimeStamp(buf)
    if err != nil {
        fmt.Println(err)
        return err
    }

    return TriggerTouch(buf)
}

func leftPage() error {
    return TouchPage(gLeftEvent)
}

func rightPage() error {
    return TouchPage(gRightEvent)
}

func left(w http.ResponseWriter, r *http.Request) {
    gLog.WriteString("left \n")
    gLog.Sync()

    err := leftPage()
    if err != nil {
        io.WriteString(w, fmt.Sprintf("%v", err))
        return
    }

    io.WriteString(w, fmt.Sprintf("%v true(%08X)", err, int32(time.Now().Unix())))
}

func right(w http.ResponseWriter, r *http.Request) {
    gLog.WriteString("right \n")
    gLog.Sync()

    err := rightPage()
    if err != nil {
        io.WriteString(w, fmt.Sprintf("%v", err))
        return
    }

    io.WriteString(w, fmt.Sprintf("%v true(%08X)", err, int32(time.Now().Unix())))
}

func exit(w http.ResponseWriter, r *http.Request) {
    gLog.WriteString("exit \n")
    gLog.WriteString("Clsoe Server \n")
    gLog.Sync()

    io.WriteString(w, fmt.Sprintf("true(%08X)", int32(time.Now().Unix())))
}

func main() {
    gLog, err := os.OpenFile("/mnt/onboard/.koboserver/HTTPServer.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0777)
    if err != nil {
        panic(err)
    }

    //defer gLog.Close()

    gLog.WriteString("Prepare to run Server \n")

    http.HandleFunc("/left", left)
    http.HandleFunc("/right", right)
    http.HandleFunc("/exit", exit)

    http.ListenAndServe(":80", nil)
}
